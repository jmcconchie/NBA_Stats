@using NBA_Stats.Models;
@{
    ViewBag.Title = "Player Comparison";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.UseSelect2 = true;
    ViewBag.UseD3 = true;
}

<h2>Player Comparison</h2>
<style>
    .extraCompare {
        display: none;
    }

    .max .bar {
        fill: #69b3a2;
    }

    text.label {
        font-size: 16px;
        font-weight: 500;
    }



</style>

@Html.Partial("_playerSelect2Search", new PlayerSearchModel { includeScripts = true, isRemovable = false })
<hr />
@Html.Partial("_playerSelect2Search", new PlayerSearchModel { includeScripts = false, isRemovable = false })
<hr />
@for (int i = 0; i < 3; i++)
{
    <div class="extraCompare">
        @Html.Partial("_playerSelect2Search", new PlayerSearchModel { includeScripts = false, isRemovable = true })
        <hr />
    </div>
}

<div class="row">
    <div class="col-12 text-center">
        <button id="addCompareBtn" type="button" class="btn btn-primary btn-lg"><i class="fa fa-plus"></i> Add another</button>
    </div>
</div>
<button type="button" onclick="comparePlayers()">Compare</button>

<div id="my_dataviz"></div>

@section Scripts{
    @*<script src="https://d3js.org/d3.v5.min.js"></script>*@
    <script type="text/javascript">

        $("#addCompareBtn").click(function () {

            $(".extraCompare:hidden:first").slideToggle();

            if (!$(".extraCompare:hidden").length) {
                $("#addCompareBtn").hide();
            }

        });

        $('.btnGetRandomPlayer').click(function () {

            var guid = $(this).attr("id").split('_')[1];
            var $selectInput = $('#select2_' + guid);

            $.ajax({
                    type: "POST",
                    url: '@Url.Action("Get_Random_Player", "player")',
                    dataType:'json',
                success: function (data) {
                    var option = new Option(data.fullName, data.id, true, true);



                    $selectInput.append(option).trigger('change');

                    $selectInput.trigger({
                        type: 'select2:select',
                        params: {
                            data: data
                        }
                    });


                }
            });
        });

        function comparePlayers() {
            var players = [];
            var seasons = [];
            $('.inputPlayerSearch:visible').each(function () {
                var playerID = $(this).val();
                if (playerID) {
                    players.push(playerID);
                    seasons.push('2021');
                }

            });

            if (players.length > 1) {
                //var playerParam = '';
                //players.forEach(function (id) {
                //    playerParam += '&player_ids[]=' + id;
                //});

                //$.ajax({
                //    type: "GET",
                //    url: 'https://www.balldontlie.io/api/v1/season_averages?season=' + season + playerParam,
                //    dataType: 'json',
                //    success: function (data) {
                //        showPlayerCompare(data.data);
                //    }
                //});

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Get_Player_Comparison", "player")',
                    data: {
                        "players": players.join(','),
                        "seasons": seasons.join(',')
                    },
                    success: function (data) {
                        d3.selectAll("svg").remove();
                    showPlayerCompare(data.players);
                }
            });
            }
        }

        function showPlayerCompare(sample) {
            createHorizontalBarChart(sample, 'Points', 'pts', 35);
            createHorizontalBarChart(sample, 'Rebounds', 'reb', 16);
            createHorizontalBarChart(sample, 'Assists', 'ast', 12);
            createHorizontalBarChart(sample, 'Field Goal %', 'fg_pct', 70, true);
        }


        function createHorizontalBarChart(data, label, stat, maxVal, isPct = false) {


            // set the dimensions and margins of the graph
            const margin = { top: 40, right: 60, bottom: 40, left: 120 },
                width = 460 - margin.left - margin.right,
                innerHeight = (data.length * 50),
                height = innerHeight + margin.top + margin.bottom;

            const max = d3.max(data, function (d) { return getStatValue(d) });

            // append the svg object to the body of the page
            const svg = d3.select("#my_dataviz")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height)
                .append("g")
                .attr("transform", `translate(${margin.left}, ${margin.top})`);




            // Add X axis
            const xAxis = d3.scaleLinear()
                .domain([0, Math.max(maxVal, max)])
                .range([0, width]);

            svg.append("g")
                .attr("transform", `translate(0, ${innerHeight})`)
                .call(d3.axisBottom(xAxis))
                .selectAll("text")
                .attr("transform", "translate(-10,0)rotate(-45)")
                .style("text-anchor", "end");

            // Y axis
            const yAxis = d3.scaleBand()
                .range([0, innerHeight])
                .domain(data.map(d => d.first_name + " " + d.last_name + " " + d.stats.season))
                .padding(.015);


            const gyAxis = svg.append("g")
                .call(d3.axisLeft(yAxis).tickSize([0]))
                .selectAll(".tick text")
                .call(wrap, margin.left);

            gyAxis.select('.domain')
                .attr('stroke-width', 0);



            var bars = svg.selectAll(".bar")
                .data(data)
                .enter()
                .append("g")

            //append rects
            bars.append("rect")
                .attr("class", "bar")
                .attr("y", function (d) {
                    return yAxis(d.first_name + " " + d.last_name + " " + d.stats.season);
                })
                .attr("height", yAxis.bandwidth())
                .attr("x", 0)
                .attr("fill", "#AAB8C4")
                
                .transition()
                .duration(2000)
                .attr("width", function (d) {
                    return xAxis(getStatValue(d));
                });

            bars.attr('opacity', 0.8);

            bars.on("mouseover", function (event, d) {
                d3.select(this)
                    //.transition()
                    //.duration(300)
                    .attr('opacity', 1)
                })
                .on("mouseout", function (event, d) {
                    d3.select(this)
                        //.transition()
                        //.duration(300)
                        .attr('opacity', 0.8)
                });
                
                

            

            var maxBar = bars.filter(function (d) { return getStatValue(d) === max });
            
            maxBar.selectAll("rect").transition().duration(2000)
                .attr("fill", "#69b3a2")
                .attr("width", function (d) {
                    return xAxis(getStatValue(d));
                });

            //add a value label to the right of each bar
            var valueLabel = bars.append("text")
                .attr("class", "label")
                .attr("y", function (d) {
                    return yAxis(d.first_name + " " + d.last_name + " " + d.stats.season) + yAxis.bandwidth() / 2 + 4;
                })
                .attr("x", function (d) {
                    return xAxis(getStatValue(d)) + 3;
                })
                .text(function (d) {
                    return getStatValue(d) + (isPct ? "%" : "");
                })
                .attr("opacity", 0);

            valueLabel.transition().duration(3000)
                .attr("opacity", 1);
        

            svg.append('text')
                .attr('class', 'label')
                .attr('x', width / 2)
                .attr('y', innerHeight + margin.top)
                .attr('text-anchor', 'middle')
                .text(label)

            function getStatValue(d) {
                var statValue = d.stats[stat];
                if (isPct) {
                    statValue = (statValue * 100).toFixed(1);
                }

                return statValue;
            }

            function wrap(text) {
                var labelMarginRight = 5;
                text.each(function () {
                    var text = d3.select(this),
                        words = text.text().split(/\s+/).reverse(),
                        word,
                        line = [],
                        lineNumber = 0,
                        lineHeight = 1.1, // ems
                        y = text.attr("y"),
                        dy = parseFloat(text.attr("dy")),
                        tspan = text.text(null).append("tspan").attr("x", -labelMarginRight).attr("y", y).attr("dy", dy - 0.5 + "em");
                    while (word = words.pop()) {
                        line.push(word);
                        tspan.text(line.join(" "));
                        if (!isNaN(word)) {
                            line.pop();
                            tspan.text(line.join(" "));
                            line = [word];
                            tspan = text.append("tspan").attr("x", -labelMarginRight).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                        }
                    }
                });
            }
        }
    </script>
}